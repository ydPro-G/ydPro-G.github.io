<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ydPro-G.github.io/</id>
    <title>ydPro Blog</title>
    <updated>2020-05-08T13:20:39.829Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ydPro-G.github.io/"/>
    <link rel="self" href="https://ydPro-G.github.io/atom.xml"/>
    <subtitle>Life &amp; Work</subtitle>
    <logo>https://ydPro-G.github.io/images/avatar.png</logo>
    <icon>https://ydPro-G.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, ydPro Blog</rights>
    <entry>
        <title type="html"><![CDATA[Python_变量和简单数据类型]]></title>
        <id>https://ydPro-G.github.io/post/python_-bian-liang-he-jian-dan-shu-ju-lei-xing/</id>
        <link href="https://ydPro-G.github.io/post/python_-bian-liang-he-jian-dan-shu-ju-lei-xing/">
        </link>
        <updated>2020-05-08T12:22:48.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1认识变量">1.认识变量</h1>
<ol>
<li>什么是变量？<pre><code> message = &quot;Hello World!&quot;
print(message)
</code></pre>
message就是一个变量，每个变量都能储存一个值。值——与变量相关联的信息。<br>
<strong>提醒</strong>：在程序中可随时修改变量的值，而Python会始终记录最新值🙌</li>
</ol>
<hr>
<ol start="2">
<li>变量命名规则
<ul>
<li>变量名只能包含字母，数字，下划线。</li>
<li>不能用数字开头。</li>
<li>变量名不能包含空格。</li>
<li>不要用Python关键字和函数名做变量名</li>
<li>变量名要简单而又具有描述性，易懂。😀</li>
</ul>
</li>
</ol>
<hr>
<h1 id="2字符串">2.字符串</h1>
<ol>
<li>什么是字符串？</li>
</ol>
<p>字符串就是一系列的字符。如下所示👇<br>
<code>“This is a string.&quot;</code><br>
<code>'This is also string.'</code><br>
2. 修改字符串的大小写</p>
<pre><code>name = &quot;angel&quot;
print(name.title())
</code></pre>
<ul>
<li>方法：<code>title()</code>  字符串首字母大写</li>
<li>方法：<code>upper()</code> 字符串全部大写</li>
<li>方法：<code>lower()</code>  字符串全部小写</li>
</ul>
<ol start="3">
<li>合并字符串</li>
</ol>
<pre><code>first_string = &quot;A&quot;
last_string = &quot;B&quot;
full_string = first_string + last_string + &quot;.&quot;
print(full_string)
</code></pre>
<ul>
<li>使用<code>+</code>号来合并字符串</li>
</ul>
<ol start="4">
<li>添加换行符或制表符</li>
</ol>
<pre><code>print(&quot;\nPython&quot;) 
print(&quot;\tPython&quot;) 
</code></pre>
<ul>
<li><code>\n</code>:换行符</li>
<li><code>\t</code>：制表符</li>
</ul>
<ol start="5">
<li>删除空白</li>
</ol>
<pre><code>favorite_language = ' python '
 favorite_language.rstrip()
' python'
 favorite_language.lstrip()
'python '
 favorite_language.strip()
'python' 
</code></pre>
<ul>
<li><code>.rstrip()</code>：删除末尾空白</li>
<li><code>lstrip()</code>：删除开头空白</li>
<li><code>strip()</code>：删除两端空白</li>
</ul>
<hr>
<h1 id="3数字">3.数字</h1>
<ol>
<li>整数：</li>
</ol>
<ul>
<li>2 + 3</li>
<li>3 - 2</li>
<li>2 * 3</li>
<li>3 / 2</li>
<li>2 ** 3：使用两个乘号表示乘方运算</li>
</ul>
<ol start="2">
<li>浮点数</li>
</ol>
<ul>
<li>0.1+ 0.1</li>
<li>0.2 + 0.2</li>
<li>2 * 0.1</li>
<li>2 * 0.2</li>
<li>其结果包含的小数位数可能是不确定的。</li>
</ul>
<ol start="3">
<li>使用函数str()避免类型错误</li>
</ol>
<pre><code>age = 18
message = &quot;Happy &quot; + str(age) + &quot;rd Birthday!&quot;
print(message) 
</code></pre>
<ul>
<li>使用函数str()将值为整数的变量用作字符串(将非字符串值表示为字符串)🤙</li>
</ul>
<ol start="4">
<li>注释</li>
</ol>
<pre><code># 打招呼
print(&quot;Hello!&quot;)
</code></pre>
<ul>
<li>注释使用<code>#</code>号表示，井号后面的内容会被Python解释器忽略</li>
<li>编写注释主要目的是阐述代码要做什么，如何做</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python_配置Python编程环境]]></title>
        <id>https://ydPro-G.github.io/post/python_-ji-chu-yu-fa/</id>
        <link href="https://ydPro-G.github.io/post/python_-ji-chu-yu-fa/">
        </link>
        <updated>2020-05-07T11:34:49.000Z</updated>
        <content type="html"><![CDATA[<p><strong>提示：基于Python3的基础语法</strong></p>
<h1 id="1搭建python编程环境">1.搭建Python编程环境</h1>
<ol>
<li>安装Python</li>
</ol>
<ul>
<li>[下载链接] (http://python.org/downloads/)</li>
<li>打开页面后将会看到下载选项，单击下载Python3。</li>
<li>选中复选框Add Python to PATH，配置Python环境变量。</li>
<li>打开命令窗口，输入python，如果出现Python提示符就说明Python已经安装成功。👌</li>
</ul>
<ol start="2">
<li>配置编辑器<br>
我使用的是Visual Studio Code编辑器，下载链接在这里👉<a href="https://code.visualstudio.com/">链接</a><br>
打开后找到<strong>扩展</strong>搜索Python下载即可。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux_日志系统]]></title>
        <id>https://ydPro-G.github.io/post/linux_-ri-zhi-xi-tong/</id>
        <link href="https://ydPro-G.github.io/post/linux_-ri-zhi-xi-tong/">
        </link>
        <updated>2020-03-17T04:21:53.000Z</updated>
        <content type="html"><![CDATA[<h1 id="目标">目标</h1>
<p>对于日志系统有基础的认识，了解【常见的日志】【配置的日志】【轮替的日志】</p>
<hr>
<h2 id="学习目录">学习目录</h2>
<p>1.常见的日志<br>
2.配置的日志<br>
3.转储的日志</p>
<hr>
<h3 id="1常见的日志">1.常见的日志</h3>
<p>在Linux大部分发行版都内置使用rsyslog系统日志，常见的日志一般存放在/var/log中。<br>
根据服务对象一般可以把日志分为两种：</p>
<ul>
<li>系统日志</li>
<li>应用日志<br>
系统日志主要存放系统内置程序或系统内核之类的日志信息。<br>
应用日志主要是存放第三方应用所产生的日志。</li>
</ul>
<h4 id="常见的系统日志">常见的系统日志</h4>
<table>
<thead>
<tr>
<th>alternatives.log</th>
<th>系统的一些更新替代信息记录</th>
</tr>
</thead>
<tbody>
<tr>
<td>apport.log</td>
<td>应用程序崩溃信息记录</td>
</tr>
<tr>
<td>apt/history.log</td>
<td>使用apt-get安装卸载软件的信息记录</td>
</tr>
<tr>
<td>apt/term.log</td>
<td>使用apt-get时的具体操作</td>
</tr>
<tr>
<td>auth.log</td>
<td>登录认证的信息记录</td>
</tr>
<tr>
<td>boot.log</td>
<td>系统启动时的程序服务的日志信息</td>
</tr>
<tr>
<td>btmp</td>
<td>错误的信息记录</td>
</tr>
<tr>
<td>Consolekit/history</td>
<td>控制台的信息记录</td>
</tr>
<tr>
<td>dist-upgrade</td>
<td>dist-upgrade 这种更新方式的信息记录</td>
</tr>
<tr>
<td>dmesg</td>
<td>启动时，显示屏幕上内核缓冲信息,与硬件有关的信息</td>
</tr>
<tr>
<td>dpkg.log</td>
<td>dpkg 命令管理包的日志</td>
</tr>
<tr>
<td>faillog</td>
<td>用户登录失败详细信息记录</td>
</tr>
<tr>
<td>fontconfig.log</td>
<td>与字体配置有关的信息记录</td>
</tr>
<tr>
<td>kern.log</td>
<td>内核产生的信息记录，在自己修改内核时很有帮助</td>
</tr>
<tr>
<td>lastlog</td>
<td>用户的最近信息记录</td>
</tr>
<tr>
<td>wtmp</td>
<td>登录信息的记录，wtmp可以找出谁正在进入系统</td>
</tr>
<tr>
<td>syslog</td>
<td>系统信息记录</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="2配置的日志">2.配置的日志</h3>
<h4 id="日志信息是如何实现的">日志信息是如何实现的？</h4>
<p>通过两种方式：</p>
<ul>
<li>一种由软件开发商自己来自定义日志格式然后指定输出日志位置</li>
<li>一种方式就是Linux提供的日志服务程序，也就是rsyslog<br>
rsyslog的全称是 rocket-fast system for log，它提供了高性能高安全功能和模块化设计。</li>
</ul>
<h4 id="rsyslog的配置文件有什么呢">rsyslog的配置文件有什么呢？</h4>
<ul>
<li>一个是/etc/rsyslog.conf<br>
#配置环境，也就是加载模块，文件所属者</li>
<li>一个是/etc/rsyslog.d/50-default.conf<br>
#配置的Filter Conditions</li>
</ul>
<h4 id="rsyslog模块构成">rsyslog模块构成：</h4>
<ul>
<li>input</li>
<li>output</li>
<li>parser</li>
<li>queue</li>
</ul>
<h5 id="模块流程通过input-module收集消息然后将收集的消息传送给parser-module通过分析模块的层层处理将真正需要的消息传送给output-module然后输出至日志文件">模块流程：通过input module收集消息，然后将收集的消息传送给parser module，通过分析模块的层层处理将真正需要的消息传送给output module，然后输出至日志文件。</h5>
<h5 id="queue模块高并发模块">queue模块：高并发模块。</h5>
<h4 id="etcrsyslogd50-defaultconf-配置文件">etc/rsyslog.d/50-default.conf 配置文件</h4>
<p>这个文件中主要是配置的 Filter Conditions，也就是我们在流程图中所看见的 Parser &amp; Filter Engine,它的名字叫 Selectors 是过滤 syslog 的传统方法，他主要由两部分组成，facility 与 priority。</p>
<h3 id="3转储的日志">3.转储的日志</h3>
<p>出现原因：每天都有许多的日志信息被写入文件，为了节约空间logratate诞生了。</p>
<h4 id="logratate日志文件管理工具-将旧的日志文件删除创建新的日志文件根据日志文件的大小或者日志文件的天数来切割日志管理日志这个过程叫做转储">logratate：日志文件管理工具。将旧的日志文件删除，创建新的日志文件，根据日志文件的大小或者日志文件的天数来切割日志，管理日志，这个过程叫做“转储”。</h4>
<p>logratate是基于CRON来运行，其脚本是/etc/cron.daily/logratate,同时，可以在/etc/logratate中找到其配置文件。</p>
<h4 id="logratate配置文件信息参数及含义">logratate配置文件信息参数及含义</h4>
<p>see &quot;man logrotate&quot; for details  //可以查看帮助文档<br>
rotate log files weekly<br>
weekly                             //设置每周转储一次(daily、weekly、monthly当然可以使用这些参数每天、星期，月 )<br>
keep 4 weeks worth of backlogs<br>
rotate 4                           //最多转储4次<br>
create new (empty) log files after rotating old ones<br>
create                             //当转储后文件不存在时创建它<br>
uncomment this if you want your log files compressed<br>
compress                          //通过gzip压缩方式转储（nocompress可以不压缩）<br>
RPM packages drop log rotation information into this directory<br>
include /etc/logrotate.d           //其他日志文件的转储方式配置文件，包含在该目录下<br>
no packages own wtmp -- we'll rotate them here<br>
/var/log/wtmp {                    //设置/var/log/wtmp日志文件的转储参数<br>
monthly                        //每月转储<br>
create 0664 root utmp          //转储后文件不存在时创建它，文件所有者为root，所属组为utmp，对应的权限为0664<br>
rotate 1                       //最多转储一次</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux_进程管理]]></title>
        <id>https://ydPro-G.github.io/post/linux_-jin-cheng-guan-li/</id>
        <link href="https://ydPro-G.github.io/post/linux_-jin-cheng-guan-li/">
        </link>
        <updated>2020-03-17T04:21:05.000Z</updated>
        <content type="html"><![CDATA[<h1 id="目的">目的</h1>
<p>掌握linux提供的工具来进行进程的查看与控制（top,ps,pstree），掌握这些工具能让我们在某些进程出现异常的时候及时查看相关的指标，从而解决问题。</p>
<hr>
<h2 id="学习目录">学习目录</h2>
<p><strong>1.查看进程的运行状态</strong><br>
1.2top工具的使用<br>
1.3ps工具的使用<br>
1.4pstree工具的使用<br>
<strong>2.进程管理</strong><br>
2.1kill命令的掌握与使用<br>
2.2进程的执行顺序查看与修改</p>
<hr>
<h3 id="1查看进程的运行状态">1.查看进程的运行状态</h3>
<p>通过<code>top</code>实时查看进程的状态，以及系统的一些信息。<br>
通过<code>ps</code>静态查看当前的进程信息。<br>
通过	<code>pstree</code>查看当前活跃进程的树形结构。</p>
<hr>
<h3 id="12top工具的使用">1.2top工具的使用</h3>
<p>查看一些进程的状态及系统信息。<br>
输入命令<code>top</code>可以看到以下信息</p>
<pre><code class="language-cpp">top命令是一个前台程序是可以交互的：
q    退出程序
I    切换显示平均负载和启动时间的信息
P    更具cpu使用百分比大小进行排序
M    根据驻留内存大小进行排序
i    忽略闲置和僵死的进程，这是一个开关式的命令
k    终止一个进程，系统提示输入PID及发送的信号值，一般终止的信号值是15，强制终止的信号值是9    
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20191228142817740.png" alt="在这里插入图片描述" loading="lazy"></figure>
<pre><code class="language-cpp">第一行：机器情况
top    表示当前程序的名称
11:24:08    表示当前的系统时间
up 34 days,7:10    表示该机器已启动多长时间
1 user    表示当前只有1个用户
load average: 0.24 0.14 0.10    分别对应1,5,15分钟内cpu的平均负载
                       #load average解释：对当前cpu工作量的度量，指运行队列的平均长度。
                       #load 的4种显示（假设当前是单cpu，单内核）
                       #1.load = 0    表示cpu没有任务
                       #2.load &lt; 1    cpu任务不多，资源充足
                       #3.load = 1    cpu任务已满，所有资源被使用，但还在能力范围之内
                       #4.load &gt; 1    cpu任务已满，所有资源被使用，还有大量进程在请求）
</code></pre>
<pre><code class="language-cpp">第一行补充：
  查看cpu信息
cat /proc/cpuinfo | grep &quot;physical id&quot; | sort | uniq | wc -l    #查看物理cpu个数
cat /proc/cpuinfo | grep &quot;physical id&quot; | grep &quot;0&quot; | wc -l    #每个cpu的核心数
  现实运维中会将load的临界值设定为0.7，load超过0.7就需要关注它，超过5就需要加班解决问题了。
  一般会先看15分钟的大趋势，再对比5分钟看看是否有下降。  
</code></pre>
<pre><code class="language-cpp">第二行：进程情况
Tasks：31 total     进程总数
1 running    1个正在运行的进程数
30 sleeping    30个睡眠的进程数
0 stopped    没有停止的进程数
0 zombie    没有僵尸进程（不会占用PID）
</code></pre>
<pre><code class="language-cpp">第三行：cpu使用情况
%Cpu(s): 3.8us    用户空间进程占用cpu百分比
0.8% sy    内核空间运行占用cpu百分比
0.0# ni    用户进程空间内改变过优先级的进程占用cpu百分比
95.3 id    空闲cpu百分比
0.0% wa    等待输入输出的cpu时间的百分比
0.0% hi    硬中断占用cpu的百分比
0.1 si    软中断占用cpu时间的百分比
0.0% st    虚拟cpu等待实际cpu的时间的百分比
</code></pre>
<pre><code class="language-cpp">第四行：内存情况
16425212 total    物理内存总量
7387528 free    空闲内存总量
1071400 used    使用的物理内存总量
7966284 buff/cache    用作内核缓存的内存量
</code></pre>
<pre><code class="language-cpp">第五行：交换区情况
969964 total    交换区总量
933952 free    空闲的交换区总量
1071400 used    使用的交换区总量
14746088 cache Mem    缓冲的交换区总量
</code></pre>
<pre><code class="language-cpp">第六行：进程概览
PID    进程id
USER    该进程的所属用户
PR    该进程执行的优先级priority值
NI    该进程的nice值
VIRT    该进程任务所使用的虚拟内存的总数
RES    该进程所使用的物理内存总数 也称为驻留内存总数
SHR    该进程共享内存的大小
S     该进程的状态 S=sleep R=running Z=zombie
%CPU    该进程cpu的利用率
%MEM    该进程内存的利用率
TIME+    该进程活跃的总时间
COMMAND    该进程运行的名字
</code></pre>
<pre><code class="language-cpp">第六行补充
  NICE值叫做静态优先级，是用户空间的一个优先级值。
  其取值范围是-20——19,这个值越小，表示进程“优先级”越大，值越大，“优先级”越小。 0是默认的值
  PR值表式Priority值，叫动态优先级。是进程在内核中实际的优先值。
  进程优先值的取值范围是通过一个宏定义的，这个宏名称是MAX_PRIO,它的值为140。
  取值范围是0——139,这个值越小优先级越高。这其中0——99是实时进程的值，100——139是给用户的值。
</code></pre>
<p><a href="https://wangchujiang.com/linux-command/c/top.html">参考网址</a></p>
<hr>
<h3 id="13ps工具的使用">1.3ps工具的使用</h3>
<p>ps是常用的查看进程的工具之一。<br>
常用命令：<code>ps -l</code> <code>ps -afxo</code> <code>ps aux</code>  <code>ps axjf</code><br>
<code>ps -l</code>：显示自己这次登录的bash相关进程信息罗列出来</p>
<p><code>ps -afxo</code>：自定义所需要的参数显示<br>
例：<code>ps -afxo user,ppid,pid,pgid,command</code> <code>pgid</code>:进程组ID号</p>
<p><code>ps aux</code>：罗列出所有进程信息，可搭配grep命令和正则表达式使用<code>ps aux | grep zsh</code><img src="https://img-blog.csdnimg.cn/20191228161057920.png" alt="在这里插入图片描述" loading="lazy"><br>
<code>ps axjf</code>:查看时将连同部分的进程呈树状显示出来<br>
<img src="https://img-blog.csdnimg.cn/2019122817172865.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-cpp">内容含义：
F    进程的标志（process flags），当flags的值为1时，表示此子程序只是fork但没有执行exec，
     为4时表示此程序使用root权限
USER   进程的拥有者
PID    进程的ID
PPID    其父进程的ID
SID    session的ID
TPGID    前台进程组的ID
%CPU    进程占用的cpu百分比
%MEM    占用内存的百分比
NI    进程的NICE值
VSZ   进程使用虚拟内存大小
RSS    驻留内存中页的大小
TTY    终端ID
S or STAT   进程状态
WCHAN    正在等待的进程资源
START    启动进程的时间
TIME    进程消耗cpu的时间
COMMAND    命令的名称和参数
</code></pre>
<pre><code class="language-cpp">补充：
  TPGID显示-1的都是守护进程。
  STAT表示进程状态，而进程状态又分为：
    R    Running 运行中
    S    Interruptible Sleep 等待调用
    D    Uninterruptible Sleep 不可中断睡眠 无法使用kill命令杀掉D状态的进程，
         一般是进程I/O的时候出现问题
    T    Stoped 暂停或跟踪状态
    X    Dead 即将被撤销
    Z    Zombie 僵尸进程，占用PID
    W    Paging 内存交换
    N    优先级低的内存
    &lt;    优先级高的内存
    s    进程的领导者
    L    锁定状态
    I    多线程状态
    +    前台状态

</code></pre>
<hr>
<h3 id="14pstree工具的使用">1.4pstree工具的使用</h3>
<p>通过<code>pstree</code>可以直观的看到相同的进程数量，可以看到进程间的<strong>相关性</strong>。<br>
<code>pstree</code>：<br>
<img src="https://img-blog.csdnimg.cn/20191228174117155.png" alt="在这里插入图片描述" loading="lazy"><br>
<code>pstree -up</code>：</p>
<pre><code class="language-cpp">-p    同时列出每个process的PID
-u    同时列出每个process的所属账号
-A    各程序树之间以ASCII字元来链接
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20191228174505452.png" alt="在这里插入图片描述" loading="lazy"></figure>
<hr>
<h3 id="2进程管理">2.进程管理</h3>
<p>掌握如何去管理进程。</p>
<hr>
<h3 id="21kill命令的掌握与使用">2.1kill命令的掌握与使用</h3>
<p>使用<code>kill</code>命令结束进程。<br>
<code>kill [信号值] [进程PID]</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux_进程概念]]></title>
        <id>https://ydPro-G.github.io/post/linux_-jin-cheng-gai-nian/</id>
        <link href="https://ydPro-G.github.io/post/linux_-jin-cheng-gai-nian/">
        </link>
        <updated>2020-03-17T04:20:24.000Z</updated>
        <content type="html"><![CDATA[<h1 id="目标">目标</h1>
<p>对于linux进程有初步的概念（进程与程序，进程的衍生，工作管理）</p>
<hr>
<h2 id="学习目录">学习目录</h2>
<p>1.进程概念理解<br>
2.进程的属性<br>
2.1进程的分类<br>
2.2进程的衍生<br>
2.3进程组与sessions<br>
2.4工作管理</p>
<hr>
<h3 id="1进程概念理解">1.进程概念理解</h3>
<p>什么是程序，什么是进程？什么是线程？</p>
<h4 id="程序">程序：</h4>
<p>程序是一个<strong>静态的概念</strong>，一般对应一个操作系统中的一个可执行文件（待执行），由一系列<strong>有逻辑，有顺序结构的指令组成</strong>。</p>
<h4 id="进程">进程：</h4>
<p><strong>1.执行中的程序叫做进程，是一个动态的概念</strong>。</p>
<p>2.进程是包含<strong>上下文切换的程序执行时间总和</strong>，是<strong>对应的CPU时间段的描述</strong>，是描述这一CPU时间段的名词。<a href="https://www.zhihu.com/question/25532384/answer/81152571">参考网址</a></p>
<p>3.进程，是计算机中的程序关于某数据集合上的一次运动活动，是<strong>系统进行资源分配和调度的基本单位。<strong>是</strong>操作系统结构的基础</strong>。它的执行<strong>需要系统分配资源创建实体</strong>后才能进行。</p>
<p>4.在<strong>Linux2.6</strong>更新后，进程本身不是基本运行单位，而是<strong>线程的容器</strong>（只在Linux中）。</p>
<p>5 进程是<strong>程序的一次动态执行过程，占用特定的地址空间</strong>。</p>
<p>6.每个进程由三部分组成：<strong>代码段，数据段，进程控制块</strong>。<strong>每个进程都是独立的</strong>，拥有自己的cpu时间，代码和数据，即使一个程序产生了好几份进程，他们之间还是独立拥有自己的这三件东西，这样的<strong>缺点</strong>是：<strong>浪费内存，cpu负担较重</strong>。<a href="https://zhuanlan.zhihu.com/p/64884223">参考网址</a></p>
<h4 id="线程">线程：</h4>
<p>1.随着技术的发展，在执行一些细小任务时，本身无需分配单独资源，进程依然会繁琐的将资源分割，即浪费时间还浪费资源，然后专门运用于这个场景的<strong>多任务技术</strong>被创造——线程。<strong>进程可以产生多个线程</strong>，而这些线程可以<strong>共享</strong>此<strong>进程</strong>的某些<strong>资源</strong>，所以<strong>进程不需要独立的资源就可以运行</strong>，可以节省资源与时间。</p>
<p>2.进程是操作系统能够进行<strong>运算调度的最小单位</strong>。它被<strong>包含在进程内</strong>，是进程中<strong>实际运作单位</strong>。</p>
<p>3.<strong>线程</strong>是一个进程内部的一个执行单元，它是<strong>程序中的单一的顺序控制进程</strong>。</p>
<p>4.<strong>一个进程</strong>可<strong>拥有多个并行</strong>的<strong>线程</strong>（需多个cpu）。</p>
<p>5.<strong>一个进程</strong>内的<strong>多个线程共享相同的内存地址空间</strong>，可以<strong>访问相同的变量和对象</strong>，它们从同一堆中<strong>分配对象并进行通信，数据交换和同步操作</strong>。</p>
<p>6.它是<strong>比进程更为细小</strong>的<strong>cpu时间段</strong>。<br>
<a href="https://my.oschina.net/cnyinlinux/blog/422207">进程与线程区别参考网址</a></p>
<hr>
<h3 id="2进程的属性">2.进程的属性</h3>
<p>进程的属性分为（进程的分类）（进程的衍生）（进程组与sessions）（工作管理）。</p>
<hr>
<h3 id="21进程的分类">2.1进程的分类</h3>
<p>两个角度：<br>
一（进程的功能与服务的对象来分）<br>
二（应用程序的服务类型）</p>
<h4 id="进程的功能与服务对象">进程的功能与服务对象</h4>
<ul>
<li>用户进程：通过执行用户程序，应用程序或称之为内核之外的系统程序而产生的进程，此类进程可以在用户的控制下运行或关闭。</li>
<li>系统进程：通过执行系统内核程序而产生的进程，而且该进程的运行不受用户干预。即使root用户也不能干预系统进程的运行。</li>
</ul>
<h4 id="应用程序的服务类型">应用程序的服务类型</h4>
<ul>
<li>交互进程：由shell终端启动的进程，在执行过程中，需要与用户进行交互操作。可以运行前台，也可以运行于后台。</li>
<li>守护进程：一种一直运行的进程。例如httpd进程。</li>
</ul>
<hr>
<h3 id="22进程的衍生">2.2进程的衍生</h3>
<ol>
<li>
<p>父进程与子进程：我们启动终端就是启动了一个bash进程，当我们在bash中再输入bash则会再启动一个bash进程。我们叫<strong>第一个bash进程为父进程</strong>，<strong>第二个bash进程为其子进程</strong>。</p>
</li>
<li>
<p><code>fork()</code>与<code>exec()</code>：<br>
<code>fork()</code>：是一个system call，主要作用是为当前进程创建一个新的进程，这个新进程就是它的子进程，这个子进程除了父进程的返回值和PID以外其他的信息都一模一样。<br>
<code>exec()</code>：也是系统调用，作用是切换子进程中的执行程序，替换其从父进程复制过来的代码段和数据段。</p>
</li>
<li>
<p>子进程退出与资源回收：当一个子进程要正常的终止运行时或该进程结束时它的主函数<code>main()</code>会执行<code>exit(n);</code>或<code>return n</code>，这里的<code>n</code>是一个信号，系统会将这个SIGCHLD信号返回给父进程。</p>
</li>
</ol>
<p>4.僵尸进程：当子进程代码执行部分已经结束执行，系统资源也基本归还给系统了，但若是其进程的进程控制块仍驻留在内存中，而它的PCB还在，代表这个进程还存在，并没有消亡<code>Z(Zombie)</code>表示僵尸进程。 缺点：子进程会占用PID，而系统会因为没有可用的PID从而导致不能产生新的进程。</p>
<p>5.孤儿进程：当父进程非正常结束，未能及时回收子进程，子进程仍在运行，这样的进程被称为孤儿进程。这样的进程会被init进程收养。</p>
<h4 id="6进程结构">6.进程结构</h4>
<p>进程0：是系统引导时创建的一个特殊进程，称为内核初始化，其最后一个动作就是调用<code>fork()</code>创建出一个子进程运行<code>/sbin/init</code>可执行文件，该进程的PID=1，进程0转化为空闲进程。<br>
<code>init进程</code>：第一个用户态的进程，由它不断调用<code>fork()</code>来创建系统里的其他进程，是所有程序的父进程，同时它也是一个守护进程。<br>
<img src="https://img-blog.csdnimg.cn/20191227162745913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lkUHJvXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
通过<code>ps -fxo user,ppid,pid,pgid,command</code>可以看到<img src="https://img-blog.csdnimg.cn/20191227162954967.png" alt="在这里插入图片描述" loading="lazy"><br>
（pid是该进程的唯一编号）（ppid是该进程的父进程的pid）（command表示该进程通过执行什么样的命令或脚本产生的）<a href="https://blog.csdn.net/nan_lei/article/details/81636473">参考网址</a></p>
<hr>
<h3 id="23进程组与sessions">2.3进程组与sessions</h3>
<ol>
<li>进程组：每一个进程都是一个进程组的成员，每一个进程组都是唯一存在的，它们依靠PGID来区别，每当一个进程被创建的时候，它便会成为其父进程所在组的一员。<br>
一般来说，该进程组的PGID等同于进程组的第一个成员的PID，该进程是这个进程组的主进程。主进程可以先终结，此时进程组仍然存在，并持有相同的PID，知道进程组中的最后一个进程结束。<br>
每一个进程组sessions中，并且这个sessions是唯一存在的。</li>
</ol>
<p>2.sessions:sessions是针对一个tty建立。sessions中的每一个进程都称为job，每一个会话可以连接一个终端。<br>
sessions 的主要作用是：将多个jobs囊括在一个终端，并取其中一个job作为前台，直接接收该终端的输入输出以及终端信号，其他job在后台运行。</p>
<hr>
<h3 id="24工作管理">2.4工作管理</h3>
<p>每个bash（终端）只能管理当前终端的job。</p>
<pre><code class="language-cpp">[job] &amp;    #&amp;让命令在后台运行

ctrl+z    #当前工作停止并转到后台

jobs     #查看停止并被放置在后台的工作

fg [%jobnumber]    #将在后台的工作拿到前台来 
#例：fg %1    #将后台job编号为1的job拿到前台来 

bg [%jobnumber]    #将job在后台运作
#例： bg %1    #将后台job编号为1的job在后台运行

kill [-信号值] [%jobnumber]     #删除或重启job
kill信号值补充：
-1： 重新读取参数运行
-2：如同ctrl+c的操作退出
-9：强制终止该任务
-15：正常的方式终止该任务
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux_软件安装]]></title>
        <id>https://ydPro-G.github.io/post/linux_-ruan-jian-an-zhuang/</id>
        <link href="https://ydPro-G.github.io/post/linux_-ruan-jian-an-zhuang/">
        </link>
        <updated>2020-03-17T04:19:20.000Z</updated>
        <content type="html"><![CDATA[<h1 id="目标">目标</h1>
<p>学习Ubuntu下软件安装的几种方式，及apt，dpkg工具的使用。</p>
<hr>
<h2 id="学习目录">学习目录</h2>
<h3 id="1apt">1.apt</h3>
<pre><code>     1.2.软件升级
     1.3.卸载软件
     1.4.软件搜索
</code></pre>
<h3 id="2dpkg">2.dpkg</h3>
<pre><code>   2.1使用dpkg安装deb软件包
   2.2查看已安装软件包的安装目录
   2.3从二进制包安装
</code></pre>
<hr>
<h3 id="1apt-2">1.apt</h3>
<p>APT是advance packaging tool （高级包装工具）的缩写，可以自动下载，配置，安装二进制或者源代码格式的软件包。<br>
<strong>安装过程</strong>：在本地数据库中搜索关于软件的相关信息→根据这些信息在相关服务器上下载软件安装。<br>
Q:为什么要在本地服务器搜索？<br>
A：我们需要定期从服务器下载一个软件包列表（<code>sudo apt-get update</code>）来保持本地的软件包列表是最新的。而这个表里会有<strong>软件依赖信息</strong>的记录。</p>
<h4 id="apt-get工具">apt-get工具</h4>
<p>1.<code>apt-get install</code>：在后面加上软件包名，<strong>用来安装一个软件包</strong>。<br>
2.<code>apt-get update</code>：从软件源镜像服务器上<strong>下载/更新</strong>用于<strong>更新本地的软件源的软件包列表</strong>。<br>
3.<code>apt-get upgrade</code>：<strong>升级本地可升级的全部安装包</strong>，但<strong>存在依赖问题</strong>时将<strong>不会升级</strong>，通常会在更新前执行一次<code>update</code>。<br>
4.<code>apt-get dist-upgrade</code>：<strong>解决依赖关系并升级</strong>（存在不确定性）。<br>
5.<code>apt-get remove</code>：<strong>移除已安装的安装包</strong>，<strong>包括与被移除软件包存在依赖关系的软件包</strong>，但<strong>不包含软件包的配置文件</strong>。<br>
6.<code>apt-get autoremove</code>：<strong>移除之前被其他安装包依赖</strong>，但<strong>现在不再使用的软件包</strong>。<br>
7.<code>apt-get purge</code>：与<code>remove</code>相同，但会<strong>完全移除软件包，包含其配置文件</strong>。<br>
8.<code>apt-get clean</code>：<strong>移除已经被下载到本地并安装的软件包</strong>。<br>
9.<code>apt-get autoclean</code>：<strong>移除已安装的软件的旧版本软件包</strong>。</p>
<h4 id="apt-get参数">apt-get参数</h4>
<p>1.<code>-f</code>：<strong>修复损坏的依赖关系</strong><br>
2.<code>-d</code>：<strong>只下载</strong>不安装<br>
3.<code>-y</code>：<strong>自动回应</strong>是否安装软件包的选项<br>
4.<code>--reinstall</code>：<strong>重新安装</strong>已安装的但可能存在问题的软件包</p>
<hr>
<h3 id="12-软件升级">1.2 软件升级</h3>
<p>实例：</p>
<pre><code class="language-cpp">sudo apt-get update    #更新软件源   
sudo apt-get upgrade    #升级没有依赖问题的软件包
sudo apt-get dist-upgrade    #升级并解决依赖关系
</code></pre>
<hr>
<h3 id="13卸载软件">1.3卸载软件</h3>
<p>实例：</p>
<pre><code class="language-cpp">sudo apt-get remove    #保留配置文件的删除
sudo apt-get purge    #不保留配置文件的删除
sudo apt-get autoremove    #移除不再需要的被以来的软件包
</code></pre>
<hr>
<h3 id="14软件搜索">1.4软件搜索</h3>
<p>实例：</p>
<pre><code class="language-cpp">sudo apt-cache search [软件名]    
#apt-cache针对本地数据进行相关操作的工具
#search [软件名] 在本地数据库中搜索软件
</code></pre>
<p><a href="https://www.debian.org/doc/manuals/apt-howto/index.zh-cn.html#contents">APT参考网址</a></p>
<hr>
<h2 id="2dpkg-2">2.dpkg</h2>
<p>使用<code>dpkg</code>从本地磁盘安装deb安装包。<br>
它可以对软件包执行打包和解包操作以及提供软件包信息。<br>
并不会自动解决依赖关系。<br>
<strong>常用参数：</strong><br>
1.<code>-i</code>：安装指定deb包。<br>
2.<code>-I</code>：显示deb包的文件的信息。<br>
3.<code>-r</code>：remove，移除已安装的软件包。<br>
4.<code>-R</code>：后面加上目录名，用于安装该目录下的所有deb安装包。<br>
5.<code>-s</code>：显示已安装软件的信息。<br>
6.<code>-S</code>：搜索已安装的软件包<br>
7.<code>-L</code>：显示已安装软件包的目录信息。</p>
<hr>
<h3 id="21使用dpkg安装deb软件包">2.1使用dpkg安装deb软件包</h3>
<p>实例：</p>
<pre><code class="language-cpp">sudo apt-get -d install -y emacs    #使用-d只下载不安装emacs编辑器
sudo dpkg -i emacs.deb[软件包名]    #这里会报错，因为dpkg不能为你解决依赖关系
sudo apt-get update    #更新源
sudo apt-get -f install -y    #使用apt-get的-f参数修复依赖关系的安装
</code></pre>
<h3 id="22查看已安装软件包的安装目录">2.2查看已安装软件包的安装目录</h3>
<p>实例：</p>
<pre><code class="language-cpp">sudo dpkg -L [软件包名]
</code></pre>
<h3 id="23从二进制包安装">2.3从二进制包安装</h3>
<p>将二进制包解压后放到合适的目录，然后将包含可执行的主程序文件的目录添加到PATH环境变量中即可。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux_数据提取]]></title>
        <id>https://ydPro-G.github.io/post/linux_-shu-ju-ti-qu/</id>
        <link href="https://ydPro-G.github.io/post/linux_-shu-ju-ti-qu/">
        </link>
        <updated>2020-03-17T04:18:39.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前提">前提</h1>
<p>有时候我们需要从文件里提取数据，当然也可能是老板甩过来一个文件让你把里面的电话和邮箱全部提取，这时候一条一条的复制粘贴总是太麻烦，这个时候我们就需要利用一些命令和正则表达式在linux系统中自动提取出来。</p>
<hr>
<h1 id="目标">目标</h1>
<p>1.提取<code>data2</code>文件中的数字开头的行，并把他们写入<code>/home/root/num</code>中。<br>
2.提取<code>data2</code>文件中的邮箱，并把他们写入<code>/home/root/mail</code>中。<br>
补充：<code>data2</code>文件目录<code>/home/root/data2</code><br>
<code>data2</code>包含内容<br>
<img src="https://img-blog.csdnimg.cn/20191225111026739.png" alt="" loading="lazy"></p>
<h1 id="实例">实例</h1>
<pre><code class="language-cpp">1.提取数字开头的行，并写入/home/root/num中
grep '^[0-9]' /home/root/data2 &gt; /home/root/num    # ^：匹配输入字符串的开始位置
                                                   # [0-9]：匹配所有数字
                                                   # &gt;：重定向
                                   
2.提取文件中的所有邮箱，并写入/home/root/amil中
grep -E '*@*\.com' /home/root/data2 &gt; /home/root/mail    # -E:扩展正则表达式
                                                         
</code></pre>
<h5 id="扩展正则表达式与正则表达式的不同它们之间的区别仅仅是元字符不同">扩展正则表达式与正则表达式的不同：它们之间的区别仅仅是元字符不同。</h5>
<h5 id="基础正则表达式bre元字符">基础正则表达式（BRE）元字符：<code>^</code>,<code>$</code>,<code>.</code>,<code>[]</code>,<code>*</code>。</h5>
<h5 id="扩展正则表达式ere元字符添加了">扩展正则表达式（ERE）元字符:添加了<code>+</code>，<code>?</code>,<code>|</code>,<code>()</code>,<code>{}</code>。</h5>
<p>元字符作用详细信息：<a href="https://www.cnblogs.com/linyfeng/p/7353693.html">参考网址</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux_正则表达式]]></title>
        <id>https://ydPro-G.github.io/post/linux_-zheng-ze-biao-da-shi/</id>
        <link href="https://ydPro-G.github.io/post/linux_-zheng-ze-biao-da-shi/">
        </link>
        <updated>2020-03-17T04:17:47.000Z</updated>
        <content type="html"><![CDATA[<h1 id="目标">目标</h1>
<p>1.掌握基本命令：sed ,grep ,awk的用法<br>
2.掌握正则表达式符号和语法</p>
<h1 id="学习目录">学习目录</h1>
<p>1.什么是正则表达式？<br>
2.正则表达式的基本语法<br>
3.grep命令<br>
4.sed流编辑器<br>
5.awk文本处理语言</p>
<hr>
<h2 id="1什么是正则表达式">1.什么是正则表达式？</h2>
<p>在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。正则表达式就是记录文本规则的代码。<br>
下面通过<code>grep，sed和awk</code>命令来实际演示正则表达式如何使用。<br>
<a href="https://www.jb51.net/tools/zhengze.html">参考网址</a></p>
<hr>
<h2 id="2正则表达式的基本语法">2.正则表达式的基本语法</h2>
<p>一个正则表达式通常被称为一个pattern，为用来描述或者匹配一系列符合某个句法规则的字符串。</p>
<h3 id="选择">选择</h3>
<p><code>|</code>:表示选择。<br>
实例： <code>boy|girl</code>可以匹配boy或girl。</p>
<h3 id="限定数量">限定数量</h3>
<p><code>+</code>:表示<code>+</code>号前面的字符必须出现至少一次或多次。<br>
实例：<code>&quot;goo+gle&quot;</code>可以匹配出<code>gooogle，goooogle</code>。</p>
<p><code>?</code>;表示<code>?</code>前面的字符最多出现一次（0次或1次）。<br>
实例：<code>&quot;colou？r&quot;</code>可以匹配<code>color，colour</code>。</p>
<p><code>*</code>:表示<code>*</code>前面的字符可以不出现也可以出现一次或多次。<br>
实例：<code>&quot;0*42&quot;</code>可以匹配<code>42,042,0042,00042</code>。</p>
<h3 id="范围和优先级">范围和优先级</h3>
<p><code>()</code>圆括号可以用来定义模式字符串的范围和优先级。</p>
<h3 id="语法">语法</h3>
<p><code>\</code>:<strong>将下一个字符标记为一个特殊字符或一个原义字符。</strong><br>
<code>^</code>:匹配<strong>输入字符串开始的位置。</strong><br>
<code>$</code>:匹配<strong>输入字符串的结束位置。</strong><br>
<code>{n}</code>:n是一个非负整数<strong>匹配确定的n次。</strong><br>
实例：<code>&quot;o{2}&quot;</code>不能匹配<code>Bob</code>中的<code>o</code>，但是能匹配<code>food</code>中的两个<code>o</code>。<br>
<code>{n,}</code>:n是一个非负整数，<strong>至少匹配n次。</strong><br>
实例：<code>&quot;o{2,}&quot;</code>不能匹配<code>Bob</code>中的<code>o</code>，但是能匹配<code>fooooood</code>中的所有<code>o</code>。<code>o{1,}</code>等价于<code>o+</code>。<code>o{0,}等价于o*</code>.<br>
<code>{n,m}</code>:m和n均为非负整数，其中n&lt;=m。<strong>最少匹配<code>n</code>次且最多匹配<code>m</code>次。</strong><br>
<code>*</code>:匹配前面的子表达式零次或多次。例如，<code>zo*</code>能匹配<code>“z”、“zo”以及“zoo”</code>。*等价于<code>{0,}</code><br>
<code>+</code>:匹配前面的子表达式一次或多次。<br>
<code>?</code>:匹配前面的子表达式零次或一次。<br>
<code>.</code>:匹配除<code>\n</code>之外的任何单个字符。<br>
<code>（pattern）</code>:匹配pattern并获取这一匹配的子字符串。<br>
<code>x|y</code>:匹配x或y。<br>
<code>[xyz]</code>:字符集合。匹配所包含的任一字符。<br>
<code>[^xyz]</code>:排除型字符集合。匹配未列出的任意字符。<br>
<code>[a-z]</code>:字符范围。匹配指定范围内的任意字符。<br>
<code>[^a-z]</code>:排除型字符范围。匹配任何不在指定范围内的任意字符。<br>
【思维导图】</p>
<hr>
<h2 id="3grep命令">3.grep命令</h2>
<p>grep命令用于打印输出文本中匹配的模式串，它使用正则表达式作为模式匹配的条件。</p>
<h4 id="grep支持的三种正则表达式引擎">grep支持的三种正则表达式引擎</h4>
<p>1.<code>-E</code>:POSIX扩展正则表达式 ERE<br>
2.<code>-G</code>：POSIX基本正则表达式 BRE<br>
3.<code>-p</code>：perl正则表达式 PCRE<br>
<a href="https://wangchujiang.com/linux-command/c/grep.html">grep命令参考网址</a></p>
<h4 id="使用正则表达式bre">使用正则表达式BRE</h4>
<p>实例：</p>
<pre><code class="language-cpp">位置：
grep '^a' /etc/passwd  #查找/etc/passwd文件中以a开头的行

数量：
echo zero\nzo\nzoo | grep 'z.*o'   #匹配以z开头以o结尾的所有字符串。
echo zero\nzo\nzoo | grep 'z.o'    #匹配以z开头的以o结尾中间包含任一字符的字符串。
echo zero\nzo\nzoo | grep 'zo*'    #匹配以z开头以任意多个o结尾的字符串

选择：
nl /etc/passwd | grep '[a-z]'   #匹配/etc/passwd中所有的小写字母
nl /etc/passwd | grep '[0-9]'   #匹配/etc/passwd所有数字
nl /etc/passwd | grep '[[:digit:]]'   #匹配/etc/passwd所有数字
nl /etc/passwd | grep '[[:lower:]]'   #匹配/etc/passwd所有小写字母
nl /etc/passwd | grep '[[:upper:]]'   #匹配/etc/passwd所有大写字母
nl /etc/passwd | grep '[[:alnum:]]'   #匹配/etc/passwd所有字母和数字
nl /etc/passwd | grep '[[:alpha:]]'   #匹配/etc/passwd所有字母

排除字符
echo 'geek\ngood' | grep '[^o]'    #当^放入[]代表排除字符，o不显示
</code></pre>
<h4 id="使用扩展正则表达式ere">使用扩展正则表达式ERE</h4>
<p>要通过grep使用扩展正则表达式需要加上-E参数，或使用egrep。<br>
实例：</p>
<pre><code class="language-cpp">数量：
nl /etc/passwd | grep -E 'zo{1}'    #只匹配zo
echo 'zero\nzo\nzoo' | grep -E 'zo{1,}'    #匹配以zo开头的所有单词  

选择：
echo 'www.baidu.com\nwww.google.com\nwww.bing.com' | grep -E 'www\.(google|bing)\.com'   
#匹配www.google.com和www.bing.com
echo 'www.baidu.com\nwww.google.com\nwww.bing.com' | grep -Ev 'www\.baidu\.com'
#匹配不包含www.baidu.com的内容
PS：.号有特殊含义，需要\转义符来转义
</code></pre>
<hr>
<h2 id="4sed流编辑器">4.sed流编辑器</h2>
<p>功能强大的流式文本编辑器。<br>
sed 是一种流编辑器，它是文本处理中非常重要的工具，能够完美的配合正则表达式使用，功能不同凡响。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。</p>
<h3 id="sed基本格式">sed基本格式</h3>
<p><code>sed [参数]... [执行命令][输入文件]...</code><br>
<a href="https://wangchujiang.com/linux-command/c/sed.html">sed命令参考网址</a></p>
<h4 id="sed动作指令">sed动作指令</h4>
<p><code>s</code>:行内替换<br>
<code>c</code>:整行替换<br>
<code>a</code>:插到指定行的后面<br>
<code>i</code>:插到指定行的前面<br>
<code>p</code>:打印指定行，通常与<code>-n</code>参数配合使用<br>
<code>d</code>:删除指定行<br>
实例：</p>
<pre><code class="language-cpp">打印指定行（p）:
nl passwd（文件） | sed -n '2,5p'    #打印2-5行
nl passwd（文件） | sed -n '1~2p'    #打印奇数行

行内替换（s）：
sed -n 's/zsh/hehe/gp' passwd(文件)
#将输入文本中zsh全局替换为hehe，并且只打印替换的那一行

删除某行（d）:
sed -i '30d' passwd(文件)    #删除30行
</code></pre>
<hr>
<h2 id="5awk文本处理语言">5.awk文本处理语言</h2>
<p>文本和数据进行处理的编程语言。<br>
awk 是一种编程语言，用于在linux/unix下对文本和数据进行处理。数据可以来自标准输入(stdin)、一个或多个文件，或其它命令的输出。它支持用户自定义函数和动态正则表达式等先进功能，是linux/unix下的一个强大编程工具。它在命令行中使用，但更多是作为脚本来使用。awk有很多内建的功能，比如数组、函数等，这是它和C语言的相同之处，灵活性是awk最大的优势。<br>
操作基于<code>pattern {action}</code>完成。<br>
实例：</p>
<pre><code class="language-cpp">准备：
vim test    #使用vim新建一个文本文档
I like Linux 
www.github.com    #输入以上内容

将文本内容打印到终端
1.
awk '{
print
}' test
2.
awk '{print}' test    #可以写多行也可以写一行

将test第一行的每个字段单独显示为一行
awk '{
if(NR==1){
print $1 &quot;\n&quot; $2 &quot;\n&quot; $3 &quot;\n&quot;
} else {
print}
}' test    #NR是awk内建的变量，表示当前处理的行数。 $n中的n为相应的字段号
或者
awk '{
if(NR==1){
OFS=&quot;\n&quot;
print $1,$2,$3
} else {
print}
}' test    #OFS是awk内建的变量，表示输出时的字段分隔符，默认为空格。    

将test的第二行以点分布的字段换成以空格为分隔
awk -F'.' '{
if(NR==2){
print $1 &quot;\t&quot; $2 &quot;\t&quot; $3 &quot;\t&quot;    #print打印的非变量内容都需要用&quot;&quot;包围起来
}}' test    #-F用来预先指定待处理记录的字段分隔符
或者
awk '
BEGIN{    #BEGIN这个表达式指示了其后的动作将在所有动作之前执行。
FS=&quot;.&quot;
OFS=&quot;\t&quot;
}{
if(NR==2){
print $1,$2,$3
}}' test    
</code></pre>
<p><a href="https://coolshell.cn/articles/9070.html">参考网址1</a><br>
<a href="https://awk.readthedocs.io/en/latest/chapter-one.html">参考网址2</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux_查看历史数据/命令]]></title>
        <id>https://ydPro-G.github.io/post/linux_-cha-kan-li-shi-shu-ju-ming-ling/</id>
        <link href="https://ydPro-G.github.io/post/linux_-cha-kan-li-shi-shu-ju-ming-ling/">
        </link>
        <updated>2020-03-17T04:16:48.000Z</updated>
        <content type="html"><![CDATA[<p>在linux中，对于文本的处理和分析是极为重要的，现在有一个文件（file1）里面记载了一些数据，现在请你找出这个文件（file1）中出现频率前三的数据并保存在<code>/home/directory</code>中。</p>
<h1 id="目标">目标</h1>
<ol>
<li>处理文本文件<code>file1</code></li>
<li>结果包含三行内容，每行的内容都包含命令出现的次数和命令名称</li>
<li>将结果输入到<code>/home/directory</code>中</li>
</ol>
<h2 id="目标分析">目标分析</h2>
<p>注意使用管道<code>|</code></p>
<ol start="4">
<li>首先要查看文件内容<code>cat</code></li>
<li>将不相关的数据剔除掉<code>cut</code></li>
<li>将命令排序<code>sort</code></li>
<li>去掉重复命令并显示行数<code>uniq</code></li>
<li>将命令重新排序，<code>sort</code>让它用数字排序（<code>n</code>），大的数字显示在上面<code>r</code>,然后指定按照第一列的数字排序(<code>-k1</code>)</li>
<li>只显示文件开头前三行部分（<code>head</code>）</li>
<li>将命令重定向到<code>directory</code>中</li>
</ol>
<h3 id="命令">命令</h3>
<pre><code class="language-cpp">cat file1 | cut -c 8- | sort | uniq -dc | sort -nr -k1 | head -3 &gt; /home/directory
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux_数据流重定向]]></title>
        <id>https://ydPro-G.github.io/post/linux_-shu-ju-liu-chong-ding-xiang/</id>
        <link href="https://ydPro-G.github.io/post/linux_-shu-ju-liu-chong-ding-xiang/">
        </link>
        <updated>2020-03-17T04:15:48.000Z</updated>
        <content type="html"><![CDATA[<h1 id="目的">目的</h1>
<p>1.重定向怎么用<br>
2.文件描述符(0,1,2)</p>
<h2 id="学习目录">学习目录</h2>
<ol>
<li>数据流重定向</li>
<li>简单的重定向</li>
<li>标准错误的重定向</li>
<li>使用<code>tee</code>命令重定向到多个文件</li>
<li>exec命令</li>
<li>创建文件描述符</li>
<li>关闭文件描述符</li>
<li>完全屏蔽命令的输出</li>
<li>使用xargs分割参数列表</li>
</ol>
<hr>
<h3 id="1数据流重定向">1.数据流重定向</h3>
<h4 id="命令">命令</h4>
<p><code>&gt;</code> : 覆盖文件内容并写入<br>
<code>&gt;&gt;</code>：在文件后面追加，不覆盖文件内容<br>
<code>&lt;</code>：和<code>&gt;</code>作用一样，表示从右到左<br>
<code>&lt;&lt;</code>:和<code>&gt;&gt;</code>作用一样，表示从右到左</p>
<hr>
<h3 id="2简单的重定向">2.简单的重定向</h3>
<h4 id="前置知识文件描述符">前置知识：文件描述符</h4>
<pre><code class="language-bash"> 1.  文件描述符：0   设备文件：/dev/stdin    缩写：stdin    说明：标准输入
 2.  文件描述符：1   设备文件：/dev/stdout   缩写：stdout   说明：标准输出
 3.  文件描述符：2   设备文件：/dev/stderr   缩写：stderr   说明：标准错误
</code></pre>
<p><a href="https://blog.csdn.net/xlinsist/article/details/51147212">参考网址</a></p>
<p>实例（1：</p>
<pre><code class="language-bash">mkdir Documents #创建目录
cat &gt; Documents/test.c &lt;&lt; EOF   #将cat的连续输出重定向到一个文件中
#include &lt;stdio.h&gt;
int main()
{
    printf(&quot;hello world/n&quot;);
    return 0;
}
EOF
</code></pre>
<p>补充<code>EOF</code>：<br>
是END Of File的缩写,表示自定义终止符.既然自定义,那么EOF就不是固定的,可以随意设置别名,在linux按ctrl-d就代表EOF.<br>
EOF一般会配合cat能够多行文本输出.<br>
其用法如下:<br>
&lt;&lt;EOF        //开始<br>
....<br>
EOF            //结束<br>
<a href="https://www.cnblogs.com/xiaojianblogs/p/6486902.html">参考网址</a></p>
<p><code>cat Documents/test.c</code></p>
<p>意义：将一个文件作为命令的输入（cat），标准输出作为命令的输出</p>
<p>实例（2：</p>
<pre><code class="language-cpp"> #将echo命令的输出从默认的标准输出重定向到一个普通文件
echo 'hello world' &gt; file 
#查看文件
cat file  
</code></pre>
<hr>
<h3 id="3标准错误的重定向">3.标准错误的重定向</h3>
<p>实例（1：</p>
<pre><code class="language-cpp"> #用bash提供的特殊的重定向符号“&amp;”将标准错误和标准输出同时重定向到文件
 cat [目录]/[标准输出文件] [标准错误文件] &amp;&gt; [文件] 
</code></pre>
<p>实例（2：</p>
<pre><code class="language-cpp">#将标准错误重定向到标准输出，将标准输出重定向到文件中，注意要将标准输出重定向到文件写在前面
cat [目录]/[标准输出文件] [标准错误文件] &gt; [文件] 2&gt;&amp;1 
</code></pre>
<p>补充：在输出重定向文件描述符前加上<code>&amp;</code>，否则shell会当作重定向到一个文件名为1的文件中</p>
<hr>
<h3 id="4使用tee命令同时重定向到多个文件">4.使用tee命令同时重定向到多个文件</h3>
<p>实例（1：</p>
<pre><code class="language-cpp">#将echo命令输出通过tee命令同时重定向到file1 file2 file3
echo 'git is good' | tee file1 file2 file3  
</code></pre>
<hr>
<h3 id="5exec命令">5.exec命令</h3>
<p>调用并执行指定的命令。<br>
exec命令 用于调用并执行指令的命令。exec命令通常用在shell脚本程序中，可以调用其他的命令。如果在当前终端中使用命令，则当指定的命令执行完毕后会立即退出终端。</p>
<p>实例（1：</p>
<pre><code class="language-cpp">zsh #进入子shell
exec 1 &gt; somefile   #使用exec替换当前进程的重定向，将标准输出（1）重定向到文件中
#后面执行的命令都将重定向到文件中，知道使用exit退出当前子shell
ls            #ls命令重定向到文件（somefile）中
ll            #ll命令重定向到文件（somefile）中
pwd           #pwd命令重定向到文件（somefile）中
exit          #退出
cat somefile    #主进程查看文件（somefile）  ls ll  pwd命令会同时执行
</code></pre>
<p><a href="https://blog.csdn.net/yanggd1987/article/details/38926901">参考网址</a></p>
<h3 id="6创建文件描述符">6.创建文件描述符</h3>
<p>Linux系统将所有设备都当作文件来处理，而Linux用文件描述符来标识每个文件对象。其实我们可以想象我们电脑的显示器和键盘在Linux系统中都被看作是文件，而它们都有相应的文件描述符与之对应。<br>
shell中有9个文件描述符，上面是用了它提供的默认的0,1,2文件描述符，另外我们还可以使用3—8文件描述符。</p>
<p><code>cat /dev/fd;ls -Al</code>:查看当前shell进程中打开的文件描述符。<br>
<code>;</code>:路径的分隔符</p>
<p>实例（1：</p>
<pre><code class="language-cpp">zsh #进入子shell
exec 3 &gt; somefile           #将文件描述符3重定向到文件中（somefile）
cat /dev/fd;ls -Al;cd -     #查看当前shell中打开的文件描述符
echo &quot;this is test&quot; &gt;&amp;3           #将echo命令的输出重定向到文件描述符3种
cat somefile           #查看文件（somefile）
exit           #退出
</code></pre>
<p><a href="https://blog.csdn.net/xlinsist/article/details/51147212">参考网址</a></p>
<hr>
<h3 id="7关闭文件描述符">7.关闭文件描述符</h3>
<p><code>exec 3&gt;&amp;-</code>:关闭文件描述符3</p>
<hr>
<h3 id="8完全屏蔽命令的输出">8.完全屏蔽命令的输出</h3>
<h4 id="前置知识">前置知识</h4>
<p><code>/dev/null</code>空设备，一般用来丢弃不需要的输出流</p>
<p>实例（1：</p>
<pre><code class="language-cpp">cat directory/file 1&gt;/dev/null 2&gt;&amp;1    
#将文件标准输出（1）重定向到/dev/null中，将标准错误（2）重定向到标准输出（1）中
</code></pre>
<p>补充：<br>
<code>cat</code>：连接多个文件并打印到标准输出</p>
<hr>
<h3 id="9使用xargs分割参数列表">9.使用xargs分割参数列表</h3>
<p>将列表参数转换成小块分段传递给其他命令，以避免参数列表过长问题。</p>
<p>实例（1：</p>
<pre><code class="language-cpp">cut -d: -f1 &lt; /etc/passwd | sort |xargs echo
 #将/etc/passwd文件按：分割，取第一个字段排序后，使用echo命令生成一个列表。
</code></pre>
<p><a href="https://wangchujiang.com/linux-command/c/xargs.html">参考网址</a></p>
]]></content>
    </entry>
</feed>